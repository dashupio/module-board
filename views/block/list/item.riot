<block-list-item>
  <div if={ !props.item.get('archived') } class={ `card card-sm card-task card-${getColor()}${isActive() ? ' active' : ''}` } onclick={ (e) => onClick(e) } data-id={ props.item.get('_id') } id={ `task-${props.item.get('_id')}` }>
    <div if={ getColor() } class="color-strip" />
    <div if={ hasTags() } class="card-header tags p-2 pb-1 dropdown">
      <template each={ (type, a) in getTagTypes() }>
        <button each={ (tag, i) in getTags(type) } class={ `btn btn-sm mr-1 btn-${tag.color}` } onclick={ (e) => props.addTag(e, props.item, type) }>
          { tag.label }
        </button>

        <button class="btn btn-sm btn-outline-primary" id={ `tag-${props.item.get('_id')}` } onclick={ (e) => props.addTag(e, props.item, type) } data-toggle="tooltip" title={ type.label }>
          <i class="fa fa-tag" />
        </button>
      </template>
    </div>

    <div class={ `card-body py-1 px-2${hasTags() ? ' pt-2' : ''}` }>
      <hbs template={ props.block.display || '' } data={ props.item ? props.item.get() : {} } />
    </div>

    <div class="card-footer tags p-2 pt-1 dropdown">
      <template each={ (type, a) in getUserTypes() }>
        <button if={ hasUser() } each={ (user, i) in getUsers(type) } class="btn btn-sm btn-circle mr-1" style={ getAvatar(user) ? `background-image:url(${getAvatar(user)})` : null } data-toggle="tooltip" title={ user.name } onclick={ (e) => props.addUser(e, props.item, type) }>
          { getAvatar(user) ? '' : getShortName(user) }
        </button>

        <button if={ hasUser() } class="btn btn-sm btn-outline-primary btn-circle" id={ `user-${props.item.get('_id')}` } onclick={ (e) => props.addUser(e, props.item, type) } data-toggle="tooltip" title={ type.label }>
          <i class="fa fa-plus" />
        </button>
      </template>

      <button class={ `btn btn-sm btn-${props.item.get('_alert.important') && !props.item.get('_alert.all') ? '' : 'outline-primary'}${props.item.get('_alert.important') ? 'primary' : ''}${props.item.get('_alert.all') && !props.item.get('_alert.important') ? 'info' : ''} ml-auto` } id={ `chat-${props.item.get('_id')}` } onclick={ (e) => onClick(e) }>
        <span if={ state.count } class="mr-2">
          { state.count.toLocaleString() }
        </span>
        <i class="fa fa-comments" />
      </button>
    </div>
  </div>

  <script>
    // import base
    import tmpl from 'riot-tmpl';

    /**
     * export default
     */
    export default class BlockListItem {

      /**
       * on before mount
       */
      onMounted(...args) {
        // bind
        this.onCount = this.onCount.bind(this);

        // on update
        if (typeof window === 'undefined') return;

        // safe updated
        this.safeUpdate = () => {
          // safe update
          this.update();
        };

        // on item
        if (this.props.phone) this.props.phone.on('item', this.safeUpdate);
        this.props.item.on('update', this.safeUpdate);

        // socket
        eden.socket.on(`chat.${this.props.item.get('_id')}.count`, this.onCount);
        eden.socket.call('chat.count', this.props.item.get('_id')).then(this.onCount);
      }

      /**
       * on updated
       */
      onUpdated(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // check
        $(this.$('[data-toggle="tooltip"]')).tooltip();
      }

      /**
       * on before unmount
       */
      onBeforeUnmount(...args) {
        // on update
        if (typeof window === 'undefined') return;

        // on item
        if (this.props.phone) this.props.phone.removeListener('item', this.safeUpdate);
        this.props.item.removeListener('update', this.safeUpdate);

        // off
        eden.socket.call('chat.count.leave', this.props.item.get('_id'));
        eden.socket.off(`chat.${this.props.item.get('_id')}.count`, this.onCount);
      }

      /**
       * on click
       */
      onClick(e) {
        // check
        if ($(e.target).is('a') || $(e.target).closest('a').length || $(e.target).is('.btn') || $(e.target).closest('.btn').length) return;

        // prevent
        e.preventDefault();
        e.stopPropagation();

        // on item
        if (this.props.onSelect) this.props.onSelect(this.props.item);
      }

      /**
       * is active
       */
      isActive() {
        // return is active
        return this.props.isSelected ? this.props.isSelected(this.props.item) : null;
      }

      /**
       * get color
       */
      getColor() {
        // get color
        return this.getTags(this.getTagTypes()[0])[0] ? this.getTags(this.getTagTypes()[0])[0].color : null;
      }

      /**
       * get types
       */
      getTagTypes() {
        // set types
        let types = (this.props.page.get('data.tag') || []);
        if (!Array.isArray(types)) types = [types];

        // return fields
        return types.map((type) => {
          // return type
          return (this.props.context.fields || []).find((f) => f.uuid === type);
        }).filter((t) => t);
      }

      /**
       * get types
       */
      getUserTypes() {
        // set types
        let types = (this.props.page.get('data.user') || []);
        if (!Array.isArray(types)) types = [types];

        // return fields
        return types.map((type) => {
          // return type
          return (this.props.context.fields || []).find((f) => f.uuid === type);
        }).filter((t) => t);
      }

      /**
       * get tags
       */
      getTags(tagField) {
        // tag field
        if (!tagField) return [];

        // get options
        const options = tagField.options || [];

        // check options
        if (!options.length) return [];

        // get value
        let val = this.props.item.get(tagField.name || tagField.uuid) || [];

        // set value
        if (typeof val === 'string') val = [val];

        // tags
        return options.filter((t) => {
          // return has tag
          return val.includes(t.value);
        });
      }

      /**
       * get tags
       */
      getUsers(userField) {
        // check options
        if (!userField) return [];

        // get value
        let val = this.props.item.get(userField.name || userField.uuid) || [];

        // set value
        if (val && !Array.isArray(val)) val = [val];

        // tags
        return val;
      }

      /**
       * get short name
       */
      getShortName(user) {
        // get name
        const name = `${user.name || ''}`.trim() || 'N A';

        // return name
        return `${(name.split(' ')[0] || '')[0] || ''}${(name.split(' ')[1] || '')[0] || ''}`;
      }

      /**
       * get short name
       */
      getAvatar(user) {
        // return avatar
        return ((((user.avatar || [])[0] || {}).thumbs || {})['1x-sq'] || {}).url;
      }

      /**
       * has tags
       */
      hasTags() {
        // tag uuid
        return (this.props.page.get('data.tag') || []).length;
      }

      /**
       * has tags
       */
      hasUser() {
        // tag uuid
        return (this.props.page.get('data.user') || []).length;
      }

      /**
       * on open
       *
       * @param {Event} e
       */
      onCount(count) {
        // count
        this.update({
          count,
        });
      }
    }
  </script>
</block-list-item>