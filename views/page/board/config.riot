<page-board-config>
  <div class="mb-3">
    <label class="form-label">
      Board Model
    </label>
    <eden-select on-change={ (e, val) => onModel(val) } ref={ ref('model') } placeholder="Select Model" data={ getModel() } />
    <small>
      The model this page should display.
    </small>
  </div>
  
  <div if={ !loading('model') && props.page.get('data.model.id') } class="mb-3">
    <label class="form-label">
      Board Forms
    </label>
    <eden-select on-change={ (e, val) => onForms(val) } ref={ ref('forms') } placeholder="Select Forms" data={ getForms() } multiple={ true } />
    <small>
      The forms to filter by for data.
    </small>
  </div>
  
  <div if={ !loading('model') && props.page.get('data.model.id') } class="mb-3">
    <label class="form-label">
      Modal Form
    </label>
    <eden-select on-change={ (e, val) => onForm(val) } ref={ ref('form') } placeholder="Select Form" data={ getForm() } />
    <small>
      The form that will show in the modal when viewing a task.
    </small>
  </div>

  <div if={ props.page.get('data.forms.0.id') }>
    <hr />
      
    <div class="mb-3">
      <div class="form-check form-switch">
        <input class="form-check-input" id="is-required" type="checkbox" onchange={ (e) => onBacklog(e) } { ...getProps({ checked : !props.page.get('data.backlog.disabled') }) }>
        <label class="form-check-label" for="is-required">
          Backlog enabled
        </label>
      </div>
    </div>

    <div class="mb-3" if={ !props.page.get('data.backlog.disabled') }>
      <label class="form-label">
        Backlog Name
      </label>
      <input type="text" class="form-control" onchange={ (e) => onBacklogName(e) } placeholder="Set Backlog Name" data={ props.page.get('data.backlog.name') || 'Backlog' } />
      <small>
        The name of the backlog column.
      </small>
    </div>

    <hr />
      
    <div class="mb-3">
      <label class="form-label">
        Group By
      </label>
      <eden-select on-change={ (e, val) => onGroup(val) } ref={ ref('group') } url={ `/app/${props.dashup.get('_id')}/form/${getGroupUrl()}/order-select-radio/fields` } placeholder="Select Field" data={ getGroup() } />
      <small>
        The columns that will show on this page.
      </small>
    </div>
      
    <div class="mb-3">
      <label class="form-label">
        Tag Field
      </label>
      <eden-select on-change={ (e, val) => onTag(val) } ref={ ref('tag') } url={ `/app/${props.dashup.get('_id')}/form/${getGroupUrl()}/tag-select/fields` } placeholder="Select Tag Field" data={ getTag() } />
      <small>
        Selecting a tag field will allow you to tag tasks.
      </small>
    </div>
      
    <div class="mb-3">
      <label class="form-label">
        User Field
      </label>
      <eden-select on-change={ (e, val) => onUser(val) } ref={ ref('user') } url={ `/app/${props.dashup.get('_id')}/form/${getGroupUrl()}/user/fields` } placeholder="Select User Field" data={ getUser() } />
      <small>
        Selecting a user field will allow you to assign tasks to that user.
      </small>
    </div>

    <div class="mb-3">
      <label class="form-label">
        Item Display
      </label>
      <code-block ref={ ref('display') } mode="handlebars" content={ props.page.get('data.display') || '' } prevent-update={ true } on-change={ (e) => onDisplay(e) } />
      <div class="alert alert-primary mt-2">
        <hbs template={ props.page.get('data.display') || '' } data={ state.test ? state.test.get() : {} } />
      </div>
    </div>
  </div>

  <div if={ props.page.get('data.forms.0.id') }>
    <hr />
      
    <div class="mb-3">
      <label class="form-label">
        Filter By
      </label>

      <dashup-query fields={ state.fields } on-change={ (val) => onFilter(val) } value={ props.page.get('data.filter') ? JSON.parse(props.page.get('data.filter')) : [] } />
    </div>
  </div>

  <script>
    // export default
    export default class DashupConfigGrid {

      /**
       * on before mount
       */
      onBeforeMount() {
        // bind methods
        this.onTag = this.onTag.bind(this);
        this.onUser = this.onUser.bind(this);
        this.onForm = this.onForm.bind(this);
        this.onModel = this.onModel.bind(this);
        this.onGroup = this.onGroup.bind(this);
        this.onForms = this.onForms.bind(this);
        this.onFilter = this.onFilter.bind(this);
        this.onBacklog = this.onBacklog.bind(this);
        this.onBacklogName = this.onBacklogName.bind(this);
      }

      /**
       * on model
       */
      async onModel(val) {
        // get value
        if (!val) val = this.refs.model.val();

        // model
        if (!val || !val.length) return;

        // get module
        const mod = this.props.dashup.page(val);

        // loading model
        this.loading('model', true);

        // set again
        if (mod.get('_id') !== this.props.page.get('data.model')) {
          // set form again
          await this.props.data('form', null);
        }
        
        // set model
        await this.props.data('model', mod.get('_id'));

        // loading model
        this.loading('model', false);
      }

      /**
       * on model
       */
      onFilter(val) {
        // set model
        this.props.data('filter', JSON.stringify(val));
      }

      /**
       * on model
       */
      onForm(val) {
        // forms
        if (!val) val = this.refs.form.val();

        // model
        if (!val) return;

        // set module
        const mod = this.props.dashup.page(val);
        
        // set model
        this.props.data('form', mod.get('_id'));
      }

      /**
       * on forms
       */
      onForms(vals) {
        // forms
        if (!vals) vals = this.refs.forms.val();
        if (!vals) vals = [];
        if (!Array.isArray(vals)) vals = [vals];

        // set module
        const forms = vals.map((val) => {
          // return form
          return this.props.dashup.page(val);
        });
        
        // set model
        this.props.data('forms', forms.map((mod) => {
          // return forms
          return mod.get('_id');
        }));
      }

      /**
       * on model
       */
      async onBacklog(e) {
        // get value
        const val = $(e.target).is(':checked');

        // get backlog
        const backlog = this.props.page.get('data.backlog') || {};

        // set value
        backlog.disabled = !val;
        
        // set model
        this.props.data('backlog', backlog);
      }

      /**
       * on model
       */
      async onBacklogName(e) {
        // get value
        const val = e.target.value;

        // model
        if (!val || !val.length) val = 'Backlog';

        // get backlog
        const backlog = this.props.page.get('data.backlog') || {};

        // set value
        backlog.name = val;
        
        // set model
        this.props.data('backlog', backlog);
      }

      /**
       * on model
       */
      async onGroup(field) {
        // get value
        if (!field) field = this.refs.group.val();

        // model
        if (!field || !field.length) return;

        // get field
        const result = await (await fetch(`/app/${props.dashup.get('_id')}/form/${this.getgroupurl()}/fields/${field}`)).json();
        
        // set model
        this.props.data('group', result.data);
      }

      /**
       * on model
       */
      async onTag(field) {
        // get value
        if (!field) field = this.refs.tag.val();

        // model
        if (!field || !field.length) return;

        // get field
        const result = await (await fetch(`/app/${props.dashup.get('_id')}/form/${this.getgroupurl()}/fields/${field}`)).json();
        
        // set model
        this.props.data('tag', result.data);
      }

      /**
       * on model
       */
      async onUser(field) {
        // get value
        if (!field) field = this.refs.user.val();

        // model
        if (!field || !field.length) return;

        // get field
        const result = await (await fetch(`/app/${props.dashup.get('_id')}/form/${this.getgroupurl()}/fields/${field}`)).json();
        
        // set model
        this.props.data('user', result.data);
      }

      /**
       * on color
       */
      onDisplay(value) {
        // set color
        this.props.data('display', value, true);
        this.update();
      }

      /**
       * get value
       */
      getModel() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'model';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.model') === page.get('_id'),
          };
        });
      }

      /**
       * get value
       */
      getForms() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : (this.props.page.get('data.forms') || []).includes(page.get('_id')),
          };
        });
      }

      /**
       * get value
       */
      getForm() {
        // return value
        return Array.from(this.props.dashup.get('pages').values()).filter((page) => {
          // return model pages
          return page.get('type') === 'form';
        }).map((page) => {
          // return type
          return {
            name     : page.get('name'),
            value    : page.get('_id'),
            selected : this.props.page.get('data.form') === page.get('_id'),
          };
        });
      }

      /**
       * get field
       */
      getGroup() {
        // return value
        return this.props.page.get('data.group') ? [{ name : this.props.page.get('data.group.label'), value : (this.props.page.get('data.group.name') || this.props.page.get('data.group.uuid')), selected : true }] : [];
      }

      /**
       * get field
       */
      getTag() {
        // return value
        return this.props.page.get('data.tag') ? [{ name : this.props.page.get('data.tag.label'), value : (this.props.page.get('data.tag.name') || this.props.page.get('data.tag.uuid')), selected : true }] : [];
      }

      /**
       * get field
       */
      getUser() {
        // return value
        return this.props.page.get('data.user') ? [{ name : this.props.page.get('data.user.label'), value : (this.props.page.get('data.user.name') || this.props.page.get('data.user.uuid')), selected : true }] : [];
      }

      /**
       * get group url
       */
      getGroupUrl() {
        // return
        return (this.props.page.get('data.forms') || []).map((f) => f.id).join('-');
      }

      /**
       * get props
       */
      getProps(obj) {
        // return get props
        return Object.keys(obj).reduce((accum, key) => {
          // set accum
          if (obj[key]) accum[key] = true;

          // return accum
          return accum;
        }, {});
      }

      /**
       * on settings
       *
       * @param {Event} e
       */
      show() {
        // show modal
        this.refs.config.show();

        // timeout
        setTimeout(() => {
          // refresh
          if (this.refs.display.editor) this.refs.display.editor.refresh();
        }, 200);
      }

      /**
       * on settings
       *
       * @param {Event} e
       */
      hide() {
        // show modal
        this.refs.config.hide();
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-board-config>