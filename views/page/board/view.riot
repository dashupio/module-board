<page-board-view>
  <div class="d-flex flex-column flex-1">
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.model') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>model</b> for the board.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.forms.0') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>form</b> for the board.
    </a>
    <a href="#!" class="d-block alert alert-info mb-3" if={ !props.page.get('data.group') } onclick={ (e) => props.onConfig(e) }>
      <i class="fa fa-exclamation-triangle mr-2" />
      Please select a <b>grouping field</b> for the board.
    </a>

    <!-- LOADING -->
    <div if={ props.page.get('data.group') && !state.items } class="text-center my-5 py-5">
      <i class="fa fa-spin fa-spinner h1" />
    </div>
    <!-- / LOADING -->

    <!-- BOARD -->
    <div class="view-columns flex-1" if={ props.page.get('data.group') && state.items }>
      <!-- BACKLOG -->
      <div data-column="backlog" if={ !props.page.get('data.backlog.disabled') }>
        <div class="column-header">
          { props.page.get('data.backlog.name') || 'Backlog' }
        </div>
        <div class="column-body">
          <div class="column-body-inner">
            <div class="card bg-transparent h-100 mx--1">
              <div class="task-container h-100 px-1" data-id="backlog" if={ !loading('backlog') }>
                <div each={ (item, i) in getItems('backlog') } is="page-board-task" data-id={ item.get('_id') } class={ `${isVisible(item) ? '' : 'd-none'}` } item={ item } form-fields={ props.context.fields } on-item={ (e) => props.onItem(e, item) } { ...getProps() } />
              </div>
              <div class="card-body task-container text-center" data-id="backlog" if={ loading('backlog') }>
                <i class="fa fa-spinner fa-spin" />
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- / BACKLOG -->

      <!-- COLUMNS -->
      <div each={ (column, i) in getColumns() } data-column={ column && column.id ? column.id : column }>
        <div class="column-header px-1">
          <div is={ getField(getField()).view ? `${getField(getField()).view}-field` : `field-${getField().type}-view` } view="view" field={ getField() } value={ [column] } { ...(getProps()) } />
        </div>
        <div class="column-body">
          <div class="column-body-inner">
            <div class="card bg-transparent h-100 mx--1">
              <div class="task-container h-100 px-1" data-id={ column && column.id ? column.id : column } if={ !loading(column) }>
                <div each={ (item, i) in getItems(column) } is="page-board-task" data-id={ item.get('_id') } class={ `${isVisible(item, column) ? '' : 'd-none'}` } item={ item } form-fields={ props.context.fields } on-item={ (e) => props.onItem(e, item) } { ...getProps() } />
              </div>
              <div class="card-body task-container text-center" data-id={ column && column.id ? column.id : column } if={ loading(column) }>
                <i class="fa fa-spinner fa-spin" />
              </div>
            </div>
          </div>
        </div>
      </div>
      <!-- / COLUMNS -->
    </div>
    <!-- / BOARD -->
  </div>

  <script>
    // require base class
    import uuid from 'uuid';
    import dotProp from 'dot-prop';
    import PerfectScrollbar from 'perfect-scrollbar';

    // import modules
    import pageBoardTask from './task';

    // export default
    export default class PageBoardView {


      // ////////////////////////////////////////////////////////////////////////////
      //
      // RIOT METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * local components
       */
      static get components() {
        // return components
        return {
          pageBoardTask,
        };
      }

      /**
       * on before mount
       */
      onBeforeMount(...args) {
        // bind
        this.init     = this.init.bind(this);
        this.initSort = this.initSort.bind(this);

        // module
        this.scrolls = new Map();

        // set force update
        this.scheduleUpdate = () => {
          // update
          this.update();
        };
      }

      /**
       * on mounted
       *
       * @param {Array} args
       */
      onMounted(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // init
        this.init();

        // where
        this.props.page.on('do.sort', this.init);
        this.props.page.on('data.model', this.init);
        this.props.page.on('data.field', this.init);
        this.props.page.on('data.group', this.init);
        this.props.page.on('data.filter', this.init);
        this.props.page.on('data.backlog', this.scheduleUpdate);
      }

      /**
       * on mounted
       *
       * @param {Array} args
       */
      onBeforeUnmount(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // sortables
        if (this.sortables) {
          try {
            // destroy
            this.sortables.forEach((sortable) => sortable.destroy());
          } catch (e) {}

          // reset
          this.sortables = [];
        }

        // items
        if (this.state.items && this.state.items.removeListener) {
          // safe update
          this.state.items.removeListener('update', this.scheduleUpdate);
          this.state.items.deafen();
        }

        // where
        this.props.page.removeListener('do.sort', this.init);
        this.props.page.removeListener('data.model', this.init);
        this.props.page.removeListener('data.field', this.init);
        this.props.page.removeListener('data.group', this.init);
        this.props.page.removeListener('data.filter', this.init);
        this.props.page.removeListener('data.backlog', this.scheduleUpdate);
      }

      /**
       * on updated
       */
      onUpdated(...args) {
        // check frontend
        if (typeof window === 'undefined') return;

        // set ps
        if (!this.$('.ps') && this.$('.view-columns')) {
          // perfect scrollbar
          this.ps = new PerfectScrollbar(this.$('.view-columns'));
        }

        // add perfect scrollbar
        Array.from(this.$$('.task-container')).forEach((item) => {
          // check item
          if ($('.ps__rail-y', item).length || $(item).hasClass('ps')) return;

          // set item
          if (this.scrolls.get(item.getAttribute('data-id'))) {
            // set scroll
            item.scrollTop = this.scrolls.get(item.getAttribute('data-id'));
          }

          // perfect scrollbar
          new PerfectScrollbar(item);

          // log
          item.addEventListener('ps-scroll-y', (e) => {
            // set item
            this.scrolls.set(item.getAttribute('data-id'), e.target.scrollTop);
          });
        });

        // view columns
        if (this.$('.view-columns')) {
          // init sort
          this.initSort();
        }
      }

      /**
       * should update
       */
      shouldUpdate() {
        // check updating
        return !this.__canUpdate;
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // GET METHODS
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * get props
       */
      getProps() {
        // clone
        const newProps = { ...(this.props) };

        // delete
        delete newProps.ref;
        delete newProps.type;
        delete newProps.item;
        delete newProps.view;
        delete newProps.class;
        delete newProps.struct;
        delete newProps.onItem;

        // return
        return newProps;
      }

      /**
       * get items
       *
       * @param {String} col
       */
      getItems(col) {
        // get column field
        const sort  = this.getSort();
        const field = this.getField();

        // check frontend
        if (typeof window === 'undefined') return [];
        if (!field) return [];

        // return queries
        return (this.state.items || []).filter((row) => {
          // value
          let val = row.get(`${field.name || field.uuid}`);

          // backlog
          if ((!val || !val.length) && col === 'backlog') return true;

          // val
          if (!Array.isArray(val)) val = [val];

          // check col
          return !!val.find((v) => JSON.stringify(col) === JSON.stringify(v));
        }).sort((a, b) => {
          // sort order
          let aC = a.get(sort ? (sort.name || sort.uuid) : `_meta.${this.props.page.get('_id')}.order`) || 0;
          let bC = b.get(sort ? (sort.name || sort.uuid) : `_meta.${this.props.page.get('_id')}.order`) || 0;

          // check object
          if (aC && typeof aC === 'object' && !(aC instanceof Date)) aC = JSON.stringify(aC);
          if (bC && typeof bC === 'object' && !(bC instanceof Date)) bC = JSON.stringify(bC);

          // check string
          if (typeof aC === 'string' && typeof bC === 'string') {
            // sort way
            if (this.props.page.get('data.sort.way') === -1) {
              // comnpare desc
              return bC.toLowerCase().localeCompare(aC.toLowerCase());
            }

            // compare asc
            return aC.toLowerCase().localeCompare(bC.toLowerCase());
          }

          // sort number
          if (this.props.page.get('data.sort.way') === -1) {
            if (bC > aC) return 1;
            if (bC < aC) return -1;
          }

          // check order
          if (bC > aC) return -1;
          if (bC < aC) return 1;
          return 0;
        });
      }

      /**
       * get columns
       */
      getSort() {
        // get column field
        const fields = this.props.context.fields || [];
        return fields.find((f) => f.uuid === this.props.page.get('data.sort.id'));
      }

      /**
       * get columns
       */
      getField() {
        // get column field
        const fields = this.props.context.fields || [];
        return fields.find((f) => f.uuid === this.props.page.get('data.group'));
      }

      /**
       * get columns
       */
      getActualField() {
        // get column field
        return this.props.fields.find((f) => f.type === field.type);
      }

      /**
       * get columns
       */
      getColumns() {
        // get column field
        const field = this.getField();

        // return noting
        if (!field) return [];

        // check if options
        if (field.options) {
          // options
          return field.options.map((item) => item.value);
        }

        // check if user
        if (field.type === 'user') {
          // check loading
          if (!this.loadingMembers && !this.members) {
            // loading
            this.loadingMembers = true;
            
            // data
            eden.router.get(`/app/${this.props.dashup.get('_id')}/member/query`).then((data) => {
              // check loading
              this.loadingMembers = false;

              // set members
              this.members = data.map((item) => item.data);
              this.update();
            });
          }

          // check loading
          if (this.loadingMembers) return [];
        }

        // return values
        let data = (this.state.items || []).reduce((accum, item) => {
          // check val
          let vals = item.get(field.name || field.uuid);

          // check val
          if (!vals) return accum;

          // array
          if (!Array.isArray(vals)) vals = [vals];

          // vals
          vals.forEach((val) => {
            // sanitised
            const sanitised = val && val.toJSON ? val.toJSON() : val;

            // return value
            if (!accum.find((a) => JSON.stringify(a) === JSON.stringify(sanitised))) {
              // push sanitised
              accum.push(sanitised);
            }
          });

          // return accum
          return accum;
        }, []);

        // check type
        if (field.type === 'user' && this.members) {
          // vals
          this.members.forEach((val) => {
            // return value
            if (!data.find((a) => JSON.stringify(a) === JSON.stringify(val))) {
              // push sanitised
              data.push(val);
            }
          });
        }

        // return data
        return data;
      }


      // ////////////////////////////////////////////////////////////////////////////
      //
      // Init Methods
      //
      // ////////////////////////////////////////////////////////////////////////////

      /**
       * init
       */
      async init() {
        // sortables
        if (this.sortables) {
          try {
            // destroy
            this.sortables.forEach((sortable) => sortable.destroy());
          } catch (e) {}

          // reset
          this.sortables = [];
        }

        // items
        if (this.state.items && this.state.items.removeListener) {
          // safe update
          this.state.items.removeListener('update', this.scheduleUpdate);
          this.state.items.deafen();
        }

        // get model
        let items = [];
        const model = this.props.page.get('data.model');

        // query by
        if (model) {
          // set query
          let query = this.props.dashup.page(model);

          // check items
          if ((this.props.page.get('data.forms') || []).length) {
            // loop forms
            query = query.in('_meta.form', this.props.page.get('data.forms'));
          }

          // load filter
          let filter = null;

          // try/catch
          try {
            filter = JSON.parse(this.props.page.get('data.filter'));
          } catch (e) {}

          // add initial where
          if (filter) {
            // add wheres
            filter.forEach((where) => {
              // where
              query = query.where(where);
            });
          }

          // check where
          (this.props.page.get('user.where') || []).forEach((where) => {
            // add query
            query = query[where[0]](where[1], where[2]);
          });

          // listen
          items = await query.listen();
        }

        // update
        this.update({
          items,
        });

        // safe update
        if (items && items.on) items.on('update', this.scheduleUpdate);

        // set values
        if (this.$('.view-columns')) this.ps = this.ps || new PerfectScrollbar(this.$('.view-columns'));

        // init sort
        this.initSort();

        // add perfect scrollbar
        Array.from(this.$$('.task-container')).forEach((item) => {
          // perfect scrollbar
          const ps = new PerfectScrollbar(item);

          // log
          item.addEventListener('ps-scroll-y', (e) => {
            // set item
            this.scrolls.set(item.getAttribute('data-id'), e.target.scrollTop);
          });
        });

        // current
        if (!this.shownFirst && this.props.current) {
          // shown first
          this.shownFirst = true;

          // on current
          this.props.onItem(null, this.props.current);
        }
      }

      /**
       * init sort
       */
      initSort () {
        // require sort
        const field = this.getField();
        const Sortable = require('sortablejs');

        // sortables
        if (this.sortables) {
          try {
            // destroy
            this.sortables.forEach((sortable) => sortable.destroy());
          } catch (e) {}
        }

        // sortables
        this.sortables = [];

        // check can
        if (!this.props.dashup.can(this.props.page, 'submit')) return;

        // check init
        if (!this.$$('.task-container').length) return;

        // create sortables
        this.$$('.task-container').forEach((item) => {
          // push
          this.sortables.push(new Sortable(item, {
            group          : 'task-container',
            draggable      : '[is="page-board-task"]',
            animation      : 200,
            fallbackOnBody : true,

            onEnd : async (e) => {
              // set item
              const el     = e.item;
              const target = e.to;
              const source = e.from;

              // set column
              const col    = $(target).attr('data-id') || null;
              const column = this.getColumns().find(c => c === col || c.id === col);
              
              // updates
              const updates = [];

              // set updating
              this.__canUpdate = true;

              // list all in target
              $('.card-task', target).each((i, item) => {
                // make sure not 0
                i = i + 1;

                // get item
                const task = (this.state.items || []).find((t) => {
                  // return accumulator
                  return t.get('_id') === $(item).attr('data-id');
                });

                // val
                let val = task.get(`${field.name || field.uuid}`);

                // val
                if (val && !Array.isArray(val)) val = [val];

                // check column fields
                if (!val.find((v) => JSON.stringify(v) === JSON.stringify(col))) {
                  // push update
                  updates.push(task);
                  task.set(`${field.name || field.uuid}`, col);
                }

                // check order
                if (task.get(`_meta.${this.props.page.get('_id')}.order`) !== i) {
                  // set order
                  updates.push(task);
                  task.set(`_meta.${this.props.page.get('_id')}.order`, i);
                }
              });

              // check updates
              await Promise.all(updates.map((update) => update.save()));

              // set updating
              this.__canUpdate = false;

              // load columns
              [col, $(source).attr('data-id')].forEach((col) => {
                this.loading(col || 'backlog', true);
                this.loading(col || 'backlog', false);
              });
            }
          }));
        });

        // create sortables
        this.$$('.view-columns').forEach((item) => {
          // push
          this.sortables.push(new Sortable(item, {
            group            : 'view-columns',
            delay            : 2 * 1000,
            handle           : '.btn-moves',
            animation        : 200,
            fallbackOnBody   : true,
            delayOnTouchOnly : true,

            onEnd : async (e) => {
              // set item
              const el     = e.item;
              const target = e.to;
              const source = e.from;

              // reorder columns
              const alters = this.props.page.get('data.alters') || [];

              // check columns
              $('.card', target).each((i, item) => {
                // get found
                let found = alters.find((col) => col.id === $(item).attr('data-column'));
                const column = this.state.find((col) => col.id === $(item).attr('data-column'));

                // check found
                if (!found) {
                  // set found
                  found = {
                    id    : $(item).attr('data-column'),
                    order : i,
                  };

                  // push alters
                  alters.push(found);
                } else {
                  // set found
                  found.order = i;
                }

                // set in column
                column.set('order', i);
              });

              // update
              this.loading('columns', true);

              // onset
              this.props.data('alters', alters);

              // update
              this.loading('columns', false);
            }
          }));
        });
      }

      /**
       * is filter me
       */
      isFilter(type, val) {
        // check me
        return ((this.props.page.get('user.filter') || {})[type] || false) === val;
      }

      /**
       * check visible
       */
      isVisible(task, column) {
        // tags
        const tags = this.props.search && this.props.search.length ? this.props.search.toLowerCase().split(' ') : [];
        const field = this.getField();

        // check filter
        if (this.isFilter('me', true)) {
          // check vals
          const userFields = [...(this.props.context.fields)].filter((f) => (this.props.page.get('data.user') || []).includes(f.uuid));

          // get vals
          const vals = userFields.reduce((accum, userField) => {
            // val
            let val = task.get(userField ? userField.name || userField.uuid : 'null') || [];

            // vals
            if (val && !Array.isArray(val)) val = [val];

            // push
            accum.push(...val);

            // return accum
            return accum;
          }, []);

          // only me
          if (!vals.find((val) => {
            // user
            return val.user === this.props.me.get('id');
          })) return false;
        }

        // check tags
        if ((this.props.page.get('user.filter.tags') || []).length) {
          // check vals
          const tagFields = [...(this.props.context.fields)].filter((f) => (this.props.page.get('data.tag') || []).includes(f.uuid));

          // check filter
          if (this.props.page.get('user.filter.tags').find((tag) => {
            // check tag exists on task
            const vals = tagFields.reduce((accum, tagField) => {
              // val
              let val = task.get(tagField ? tagField.name || tagField.uuid : 'null') || [];

              // vals
              if (val && !Array.isArray(val)) val = [val];

              // push
              accum.push(...val);

              // return accum
              return accum;
            }, []);

            // check tag
            return !vals.includes(tag);
          })) return false;
        }

        // filter
        if (tags.length) {
          // search item
          const searchable = JSON.stringify(task.get()).toLowerCase();

          // search JSON
          if (tags.find((tag) => {
            // check
            return !searchable.includes(tag);
          })) return false;
        }

        // check val
        let val = task.get(field.name || field.uuid);

        // backlog
        if ((!val || !val.length) && !column) return true;
        if (!val && column) return false;
        
        // check array
        if (!Array.isArray(val)) val = [val];

        // check value
        if (!val.find((v) => JSON.stringify(v) === JSON.stringify(column))) return false;

        // return true
        return true;
      }

      /**
       * ref
       */
      ref(name) {
        // set refs
        if (!this.refs) this.refs = {};

        // return ref function
        return (that) => {
          // set ref
          this.refs[name] = that;
        };
      }

      /**
       * set loading
       */
      loading(type, way) {
        // set loading
        if (!this.__loading) this.__loading = new Map();

        // check loading
        if (!type) return !!Array.from(this.__loading.values()).find((v) => v);
        if (typeof way === 'undefined') return !!this.__loading.get(type);

        // set loading
        this.__loading.set(type, way);
        this.update();
      }
    }
  </script>
</page-board-view>